#+TITLE: Calling Functions - Scoping - Practice file
#+AUTHOR: [yourname]
#+SUBTITLE: In-class practice / DSC 205 / Lyon College Spring 2024
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

- This file contains exercises for the lecture "Calling Functions -
  Scoping" in the Advanced Introduction to Data Science course
  (DSC205) 
- Most of this material can be found in Davies, Book of
  R, Chapter 9. Solutions can be found in GitHub (PDF).

* TODO Identify and pledge yourself

1) In Emacs, replace the placeholder ~[yourname]~ at the top of this
   file by your own name and write ~(pledged)~ next to it
2) Go with the cursor on the headline and hange the ~TODO~ label to ~DONE~
   by entering ~S-<right>~ ("Shift + right-arrow").

* Scoping

Example: ~data~ as an argument, and as a function -
1) create a row-wise 3x3 matrix of the numbers {1..9}
2) list all datasets in the ~MASS~ package

#+begin_src R

#+end_src

* Global environments

Example: create three new objects and confirm their existence in the
global environment:
1) a ~numeric~ variable ~foo~
2) a ~character~ variable ~bar~
3) an anonymous (non-argument) function ~hello~ that prints "Hello!"
4) check the global environment
5) run ~hello~

#+begin_src R

#+end_src

* Package environments and namespaces

1) List all built-in ~datasets~:
   #+begin_src R

   #+end_src

2) List the objects of the ~graphics~ package:
   #+begin_src R

   #+end_src

3) Load (after installation in the R console buffer) the ~dplyr~ package
   and run the function ~dplyr::filter~.
   #+begin_src R

   #+end_src

* Local or lexical environments

Example: create a 2x2 ~matrix~ named ~youthspeak~ and pass as ~data~ in
the argument: "OMG", "LOL", "IMO", "YOLO".
#+begin_src R

#+end_src

* Search Path

1) You can view the search path with ~search()~. Try calling it without ~()~.
   #+begin_src R

   #+end_src

2) Example: create a vector ~foo~ of 5 elements with values between 0
   and 3 with ~seq~, and print it:
   #+begin_src R
  
   #+end_src

3) You can look up the environment of any function using
   ~environment~. Look up ~search~:
   #+begin_src R

   #+end_src

4) When a package is loaded with ~library~, it is inserted in the search
   path right after the global environment, along with all its
   dependencies: load the package ~MASS~ and print only the element of
   ~search()~ that indicates this package.
   #+begin_src R

   #+end_src

* Reserved and protected names

1) What happens when you assign a value to an ~NaN~?
   #+begin_src R

   #+end_src

2) ~T~ and ~F~ can also be overwritten - don't do it since they are the
   abbreviations for ~TRUE~ and ~FALSE~. Show this with a short script:
   1. Overwrite =T= with =FALSE=.
   2. =paste= the string "2 + 2 = 5" and the expression ~(2+2==5) == T~
   #+begin_src R

   #+end_src

3) With all these confusing changes, clear the global environment now:
   1. show all user-defined variables
   2. clear them
   3. show that the environment is clean (~character(0)~).
   #+begin_src R

   #+end_src

* Display package content

1) Find the built-in and automatically loaded ~methods~ package in
   ~search()~ using =which=:
   #+begin_src R

   #+end_src
   
2) Display only the first 20 items contained in the built-in and
   automatically loaded ~methods~ package using =ls=.
   
   #+begin_src R

   #+end_src

3) How many items are there in total in =package:methods=?

   #+begin_src R

   #+end_src

* Functions and environments

1) Which environment owns the ~read.table~ function?

   #+begin_src R

   #+end_src

2) Which environment owns the ~data~ function?

   #+begin_src R 

   #+end_src

3) Which environment owns the ~matrix~ function?

   #+begin_src R

   #+end_src
   
4) Which environment owns the ~jpeg~ function?

   #+begin_src R

   #+end_src
   
5) What does ~jpeg~ do? To find this out, run the ~help~ function on the
   command inside the R console and copy the description here:

   #+begin_quote

   #+end_quote

6) Show that ~base::matrix~ is called *after* ~utils::read.table~ by
   comparing the indices in the ~character~ vector ~search()~.

   /Tip:/ to extract indices, you can use the ~which~ function in
   connection with logical operators.

   #+begin_src R

   #+end_src
   
* Functions and packages

Use ~ls~ and a test for ~character~ string equality to confirm that the
function ~smoothScatter~ is part of the ~graphics~ package.

/Tip:/ given a set of logical vectors, the function ~any~ tests if at
least one of the values is true. E.g.
#+begin_src R
  any(c("Jim","Jane","Joe") == "Jane")  # this is TRUE
  any(c("Jim","Jane","Joe") == "Janet")  # this is FALSE
#+end_src

#+begin_src R

#+end_src

