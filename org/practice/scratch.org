#+startup: overview hideblocks indent entitiespretty:
#+property: header-args:python :session *Python* :results output :exports both :noweb yes :tangle yes:
* Data science from scratch

My motivation: give you an overview of a complete case study using
Python instead of R. This is the kind of stuff that we're going to do
in the "Data visualization" course using R.

This is taken from the introductory chapter of "Data science from
Scratch" (2e) by Joel Grus, O'Reilly (2019), pp. 2-14. You can find
the [[https://github.com/joelgrus/data-science-from-scratch/blob/master/scratch/introduction.py][raw source code on GitHub]].

Scenario:
#+begin_quote
You've been hired to lead the data science efforts at a social network
for data scientists. You're given a few problems in the new job.
#+end_quote

Overview:
1) Finding key connectors between users. Concepts:
   =list=, =dict=, =tuple=, comprehension, =type=, f-string.
2) Finding shared interests between users. Concepts: =list=
   comprehension as a =return= value. Specialized data type containers
   =Counter= and =defaultdict= from the =collections= library.
3) Plotting and exploring salary data. Concepts: =matplotlib.pyplot=
   functions =scatter=, =hist= and =bar=, unpacking tuples in lists with
   =zip=.

** Finding Key Connectors

Problem: the VP of Networking wants you to identify who the "key
connectors" are among data scientists.

Your input: a dump of the whole network in the form of a =list= of users
and "friendship" data in the form of a list of pairs of IDs.

- The data look like this:
  #+begin_src python :results silent
    users = [
        { "id": 0, "name": "Hero" },
        { "id": 1, "name": "Dunn" },
        { "id": 2, "name": "Sue" },
        { "id": 3, "name": "Chi" },
        { "id": 4, "name": "Thor" },
        { "id": 5, "name": "Clive" },
        { "id": 6, "name": "Hicks" },
        { "id": 7, "name": "Devin" },
        { "id": 8, "name": "Kate" },
        { "id": 9, "name": "Klein" },
        { "id": 10,"name": "Jen"}
    ]

    friendship_pairs = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 4),
                        (4, 5), (5, 6), (5, 7), (6, 8), (7, 8), (8, 9)]
  #+end_src

- To print ~users~ with one item per line, use a =list= comprehension:
  #+begin_src python
    [print(_) for _ in users]
  #+end_src

  #+RESULTS:
  #+begin_example
  {'id': 0, 'name': 'Hero'}
  {'id': 1, 'name': 'Dunn'}
  {'id': 2, 'name': 'Sue'}
  {'id': 3, 'name': 'Chi'}
  {'id': 4, 'name': 'Thor'}
  {'id': 5, 'name': 'Clive'}
  {'id': 6, 'name': 'Hicks'}
  {'id': 7, 'name': 'Devin'}
  {'id': 8, 'name': 'Kate'}
  {'id': 9, 'name': 'Klein'}
  {'id': 10, 'name': 'Jen'}
  #+end_example

- To print ~friendship_pairs~, use the same approach:
  #+begin_src python
    [print(_) for _ in friendship_pairs]
  #+end_src

  #+RESULTS:
  #+begin_example
  (0, 1)
  (0, 2)
  (1, 2)
  (1, 3)
  (2, 3)
  (3, 4)
  (4, 5)
  (5, 6)
  (5, 7)
  (6, 8)
  (7, 8)
  (8, 9)
  #+end_example

- Let's check the data types of these objects:
  #+begin_src python
    print(type(users))
    print(type({"id":0,"name":"Hero"}))
    print(type(friendship_pairs))
    print(type((0,1)))
  #+end_src

  #+RESULTS:
  : <class 'list'>
  : <class 'dict'>
  : <class 'list'>
  : <class 'tuple'>

- Things to remember about =list=, =dict= and =tuple=:
  #+begin_quote
  Python lists, dictionaries, and tuples are key data structures in
  Python that serve different purposes and have unique features:

  1. Lists:
  - Lists are ordered collections of items that can be modified.
  - Elements in a list are accessed by their index, starting from 0.
  - Lists allow for duplicates and can contain elements of different data types.
  - Common operations include appending, deleting, and slicing elements.
  - Lists are mutable, meaning that you can change their elements.

  2. Dictionaries:
  - Dictionaries are unordered collections of key-value pairs.
  - Each element in a dictionary is accessed by its key rather than by an index.
  - Keys in a dictionary must be unique and immutable, while values can be of any data type.
  - Dictionaries are commonly used for mapping relationships between keys and values.
  - Dictionaries are mutable, meaning that you can add, update, or delete key-value pairs.

  3. Tuples:
  - Tuples are ordered collections of elements that are immutable, meaning they cannot be changed.
  - Tuples are generally used to store collections of heterogeneous data, such as coordinates.
  - Tuples can be accessed by index like lists, but their elements cannot be modified once created.
  - Using tuples can improve program safety because you can group related data in a single unit.
  #+end_quote

- These data allow us to draw a network of friendship among the data
  scientists: for example, ~(0,1)~ indicates that ~Hero~ (~id:0)~ and ~Dunn~
  (~id:1~) are friends but ~Hero~ and ~Chi~ (~id:3~) are not.
  #+attr_html: :width 400px:
  #+caption: Source: Grus, 2019 (p.4)
  [[./img/network.png]]

- Representing relationships as a list of pairs is not the best way to
  work with them. For example, to find all the relationships for user
  1, you'd have to iterate over every pair looking for pairs
  containing 1.

- Can you write such an iterator for user 1? It should print all pairs
  for which either the first or the second item of a pair is 1:
  #+begin_src python
    for first_value, second_value in friendship_pairs:
        if (first_value == 1 or second_value == 1):
            print(f'({first_value}, {second_value})')
  #+end_src

  #+RESULTS:
  : (0, 1)
  : (1, 2)
  : (1, 3)

- Instead we create a dictionary for the friendships: since every user
  has a key, the dictionary can hold any attributes including
  friends. Now, we only have to look at every pair once when creating
  the =dict=.

- The process of inserting an attribute in an existing dictionary:
  first, initialize the =dict= ~friendships~ with an empty =list= for each
  user ~id~:
  #+begin_src python :results silent
    friendships = {user["id"]: [] for user in users} # dictionary comprehension
  #+end_src

- This is like a =list= comprehension: a =for= loop integrated in a
  dictionary creation. Print the empty dictionary:
  #+begin_src python
    [print(f'user: {key}, value: {value}') for key,value in friendships.items()]
  #+end_src

  #+RESULTS:
  #+begin_example
  user: 0, value: []
  user: 1, value: []
  user: 2, value: []
  user: 3, value: []
  user: 4, value: []
  user: 5, value: []
  user: 6, value: []
  user: 7, value: []
  user: 8, value: []
  user: 9, value: []
  user: 10, value: []
  #+end_example

- Rewrite this with a =for= loop:
  #+begin_src python
    for key, value in friendships.items():
        print(f'user: {key}, value: {value}')
  #+end_src

  #+RESULTS:
  #+begin_example
  user: 0, value: []
  user: 1, value: []
  user: 2, value: []
  user: 3, value: []
  user: 4, value: []
  user: 5, value: []
  user: 6, value: []
  user: 7, value: []
  user: 8, value: []
  user: 9, value: []
  user: 10, value: []
  #+end_example

- Loop over the ~friendship_pairs~ to populate the dictionary
  ~friendship~: we need to
  #+begin_src python :results silent
    for i, j in friendship_pairs:
        friendships[i].append(j) # add j as a friend of user i
        friendships[j].append(i) # add i as a friend of user j
  #+end_src

- Print the resulting dictionary:
  #+begin_src python
    [print(key,value) for key,value in friendships.items()]
  #+end_src

  #+RESULTS:
  #+begin_example
  0 [1, 2]
  1 [0, 2, 3]
  2 [0, 1, 3]
  3 [1, 2, 4]
  4 [3, 5]
  5 [4, 6, 7]
  6 [5, 8]
  7 [5, 8]
  8 [6, 7, 9]
  9 [8]
  10 []
  #+end_example

- Write out the =for= loop to understand the dictionary population:
  | i | j | friendships[i] | friendships[j] | friendships[i].append(j) | friendships[j].append(i) |
  |---+---+----------------+----------------+--------------------------+--------------------------|
  | 0 | 1 | []             | []             | [1]                      | [0]                      |
  | 0 | 2 | [1]            | []             | [1,2]                    | [0]                      |
  | 1 | 2 | [0]            | [0]            | [0,2]                    | [0,1]                    |
  | 1 | 3 | ...            | ...            | ...                      | ...                      |

- Now we can query the graph for questions like "What is the average
  number of connections?"

- To do this /from scratch/, find the /total/ number of connections, by
  summing up the length of all the ~friends~ lists:
  #+begin_src python
    def number_of_friends(user):
        """How many friends does `user` have?"""
        user_id = user["id"]   # get the key
        friend_ids = friendships[user_id]    # get the friends
        return len(friend_ids)   # return the number of friends

    total_connections = sum(number_of_friends(user) for user in users)
    print(total_connections)
  #+end_src

  #+RESULTS:
  : 24

- And now divide by the number of users:
  #+begin_src python
    num_users = len(users) # length of `user` list = number of users
    avg_connections = total_connections / num_users  # arithmetic average
    print(avg_connections)
  #+end_src

  #+RESULTS:
  : 2.1818181818181817

- Can you check the result with =numpy.mean=? (Homework)

- Solution:
  #+begin_src python
    import numpy as np

    print(np.mean(friendships)
  #+end_src

  #+RESULTS:

#+begin_src python :python python3 :session *Python* :results output :exports both :comments both :tangle yes :noweb yes
  print(num_users)
#+end_src

#+RESULTS:
: Traceback (most recent call last):
:   File "<string>", line 17, in __PYTHON_EL_eval
:   File "<string>", line 3, in <module>
:   File "/tmp/babel-jqxby4/python-cTs0zF", line 3
:     print(np.mean(friendships)
:          ^
: SyntaxError: '(' was never closed
: >>> 11

- Let's find the most and the least connected people - the ones with
  the largest number of friends. Since there aren't many, we can sort
  them from "most friends" to "least friends".

- Using =number_of_friends=, we can now create a =list= that contains the
  number of friends for each ~user~ as pairs - with a comprehension:
  #+begin_src python
    # loop over users, extract friends, add them to a list
    # (user_id, number_of_friends)
    num_friends_by_id = [(user["id"], number_of_friends(user)) for user in users]
    print(num_friends_by_id)
  #+end_src

  #+RESULTS:
  : [(0, 2), (1, 3), (2, 3), (3, 3), (4, 2), (5, 3), (6, 2), (7, 2), (8, 3), (9, 1), (10, 0)]

- Now sort the list using the =list= method =sort= and =print= the result:
  #+begin_src python
    # sort the list
    num_friends_by_id.sort(
        # by num_friends
        key=lambda id_and_friends: id_and_friends[1],
        # from largest to smallest
        reverse=True)

    # print the result
    print(num_friends_by_id)
  #+end_src

  #+RESULTS:
  : [(1, 3), (2, 3), (3, 3), (5, 3), (8, 3), (0, 2), (4, 2), (6, 2), (7, 2), (9, 1), (10, 0)]

- See the =help= for =sort= to understand the arguments:
  #+begin_example
  >>> help(list.sort)
  Help on method_descriptor:

  sort(self, /, *, key=None, reverse=False)
      Sort the list in ascending order and return None.

      The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
      order of two equal elements is maintained).

      If a key function is given, apply it once to each list item and sort them,
      ascending or descending, according to their function values.

      The reverse flag can be set to sort in descending order.
  #+end_example

- In Python, a =lambda= function is a small /anonymous/ function defined
  using the =lambda= keyword. Lambda functions can have any number of
  arguments but can only have one expression. They are commonly used
  when you need a simple function for a short period and don't want to
  define a full function using the `def` keyword.

- In the context of the code snippet you provided, the =lambda= function
  is used as a key function for sorting the list of tuples. ~key=lambda
  id_and_friends: id_and_friends[1]~ specifies that the sorting should
  be done based on the second element (index 1) of each tuple in the
  list. This lambda function takes a tuple as an argument (named
  ~id_and_friends~ in this case) and returns the second element of the
  tuple, which is the number of friends associated with that ID.

- Can you check the result with the built-in functions =min= or =max=? (Homework)
  #+begin_src python

  #+end_src

  #+RESULTS:

- We've now identified people who are somehow central to the network:
  this is an important social network /metric/, called /degree centrality/:
  #+attr_html: :width 400px:
  [[./img/degree_centrality.png]]

- This metric doesn't always deliver what our intuition demands: for
  example, in our sample network of friends, ~Thor~ (~id=4~) is central
  but has got only 2 connections, while ~Dunn~ (~id=1~) has three.

- See both social network views together in [[https://tinyurl.com/degree-centrality][tinyurl.com/degree-centrality]].

** Finding Shared Interests

- What if you wanted to encourage more connections among the network
  members? You decide to build a "other users you may know" suggester
  for the VP of Fraternization (?).

- Users might know the friends of their friends. The following
  function iterates over our ~friendships~ dictionary and returns the
  friends of a user's friends (~foaf~):
  #+begin_src python :results silent
    def foaf(user):  # takes user id as argument
        """foaf is short for 'friend of a friend' """
        return [foaf_id
                for friend_id in friendships[user["id"]] # iterate over users
                for foaf_id in friendships[friend_id]] # find their friends
  #+end_src

- Call this for example on ~users[0]~ (~'Hero'~):
  #+begin_src python
    print(users[0])
    print(foaf(users[0]))
  #+end_src

  #+RESULTS:
  : {'id': 0, 'name': 'Hero'}
  : [0, 2, 3, 0, 1, 3]

- The result of ~foaf~ includes user 0 twice because Hero is friends
  with both of his friends, and it includes users 1 and 2, although
  they are already friends of Hero already, and it includes 3 twice,
  since Chi (3) can be reached through two different friends.
  #+begin_src python
    print(friendships[0]) # [1,2]
    print(friendships[1]) # [0,2,3]
    print(friendships[2]) # [0,1,3]
  #+end_src

  #+RESULTS:
  : [1, 2]
  : [0, 2, 3]
  : [0, 1, 3]

- So people are "friends of friends" in multiple ways. Perhaps it is
  better to produce a /count/ of mutual friends and exclude people
  already known to the user. Let's rewrite the function:
  #+begin_src python :results silent
    from collections import Counter  # standard but not loaded by default

    def friends_of_friends(user):

        user_id = user["id"] # store user

        return Counter(  # count items in the following temporary container
            foaf_id   # iterate over friendships
            for friend_id in friendships[user_id] # for each of my friends
            for foaf_id in friendships[friend_id] # find their friends
            # who aren't me and are not my friends already:
            if foaf_id != user_id and foaf_id not in friendships[user_id]
        )
  #+end_src

- Here, =collections.Counter= is a method in =collections=, which offers a
  few 'container' datatypes: alternatives to =dict=, =list=, =set= and =tuple=
  ([[https://docs.python.org/3/library/collections.html][doc]]).

- Test this for Hero and Chi:
  #+begin_src python
    print(friends_of_friends(users[0])) # 2 mutual friends with Chi (3)
    print(friends_of_friends(users[3])) # 2 friends with Hero (0), 1 with Clive (5)
  #+end_src

  #+RESULTS:
  : Counter({3: 2})
  : Counter({0: 2, 5: 1})

- You might also enjoy meeting users with similar interests. You
  manage to get your hands on this data as a list of pairs ~(user_id,
  interest)~:
  #+begin_src python
    interests = [
        (0, "Hadoop"), (0, "Big Data"), (0, "HBase"), (0, "Java"),
        (0, "Spark"), (0, "Storm"), (0, "Cassandra"),
        (1, "NoSQL"), (1, "MongoDB"), (1, "Cassandra"), (1, "HBase"),
        (1, "Postgres"), (2, "Python"), (2, "scikit-learn"), (2, "scipy"),
        (2, "numpy"), (2, "statsmodels"), (2, "pandas"), (3, "R"), (3, "Python"),
        (3, "statistics"), (3, "regression"), (3, "probability"),
        (4, "machine learning"), (4, "regression"), (4, "decision trees"),
        (4, "libsvm"), (5, "Python"), (5, "R"), (5, "Java"), (5, "C++"),
        (5, "Haskell"), (5, "programming languages"), (6, "statistics"),
        (6, "probability"), (6, "mathematics"), (6, "theory"),
        (7, "machine learning"), (7, "scikit-learn"), (7, "Mahout"),
        (7, "neural networks"), (8, "neural networks"), (8, "deep learning"),
        (8, "Big Data"), (8, "artificial intelligence"), (9, "Hadoop"),
        (9, "Java"), (9, "MapReduce"), (9, "Big Data")
    ]
    # print the list
    [print(_) for _ in interests]
  #+end_src

  #+RESULTS:
  #+begin_example
  (0, 'Hadoop')
  (0, 'Big Data')
  (0, 'HBase')
  (0, 'Java')
  (0, 'Spark')
  (0, 'Storm')
  (0, 'Cassandra')
  (1, 'NoSQL')
  (1, 'MongoDB')
  (1, 'Cassandra')
  (1, 'HBase')
  (1, 'Postgres')
  (2, 'Python')
  (2, 'scikit-learn')
  (2, 'scipy')
  (2, 'numpy')
  (2, 'statsmodels')
  (2, 'pandas')
  (3, 'R')
  (3, 'Python')
  (3, 'statistics')
  (3, 'regression')
  (3, 'probability')
  (4, 'machine learning')
  (4, 'regression')
  (4, 'decision trees')
  (4, 'libsvm')
  (5, 'Python')
  (5, 'R')
  (5, 'Java')
  (5, 'C++')
  (5, 'Haskell')
  (5, 'programming languages')
  (6, 'statistics')
  (6, 'probability')
  (6, 'mathematics')
  (6, 'theory')
  (7, 'machine learning')
  (7, 'scikit-learn')
  (7, 'Mahout')
  (7, 'neural networks')
  (8, 'neural networks')
  (8, 'deep learning')
  (8, 'Big Data')
  (8, 'artificial intelligence')
  (9, 'Hadoop')
  (9, 'Java')
  (9, 'MapReduce')
  (9, 'Big Data')
  #+end_example

- For example, Hero (0) has no friends in common with Klein (9) but
  they share interests in Java and Big Data.

- We build a function that finds users with a certain interest:
  #+begin_src python :results silent
    def users_who_like(target_interest):
        """Find the ids of all users who like the target interest."""
        return [user_id
                for user_id, user_interest in interests  # loop over key, value
                if user_interest == target_interest]
  #+end_src

- Again, to avoid having to search the whole list for every search, we
  build an index from interests to users in the form of a =dict=, and
  another one from users to interests.

- Index for users by interest:
  #+begin_src python
    from collections import defaultdict

    # keys are interests, values are lists of user_ids with that interest
    user_ids_by_interest = defaultdict(list)

    for user_id, interest in interests:
        user_ids_by_interest[interest].append(user_id)

    [print(key, value) for key, value in user_ids_by_interest.items()]
  #+end_src

  #+RESULTS:
  #+begin_example
  Hadoop [0, 9]
  Big Data [0, 8, 9]
  HBase [0, 1]
  Java [0, 5, 9]
  Spark [0]
  Storm [0]
  Cassandra [0, 1]
  NoSQL [1]
  MongoDB [1]
  Postgres [1]
  Python [2, 3, 5]
  scikit-learn [2, 7]
  scipy [2]
  numpy [2]
  statsmodels [2]
  pandas [2]
  R [3, 5]
  statistics [3, 6]
  regression [3, 4]
  probability [3, 6]
  machine learning [4, 7]
  decision trees [4]
  libsvm [4]
  C++ [5]
  Haskell [5]
  programming languages [5]
  mathematics [6]
  theory [6]
  Mahout [7]
  neural networks [7, 8]
  deep learning [8]
  artificial intelligence [8]
  MapReduce [9]
  #+end_example

- Index for interests by user:
  #+begin_src python
    # keys are user_ids, values are lists of interests for that user_id
    interests_by_user_id = defaultdict(list)

    for user_id, interest in interests:
        interests_by_user_id[user_id].append(interest)

    [print(key, value) for key, value in interests_by_user_id.items()]
  #+end_src

  #+RESULTS:
  #+begin_example
  0 ['Hadoop', 'Big Data', 'HBase', 'Java', 'Spark', 'Storm', 'Cassandra']
  1 ['NoSQL', 'MongoDB', 'Cassandra', 'HBase', 'Postgres']
  2 ['Python', 'scikit-learn', 'scipy', 'numpy', 'statsmodels', 'pandas']
  3 ['R', 'Python', 'statistics', 'regression', 'probability']
  4 ['machine learning', 'regression', 'decision trees', 'libsvm']
  5 ['Python', 'R', 'Java', 'C++', 'Haskell', 'programming languages']
  6 ['statistics', 'probability', 'mathematics', 'theory']
  7 ['machine learning', 'scikit-learn', 'Mahout', 'neural networks']
  8 ['neural networks', 'deep learning', 'Big Data', 'artificial intelligence']
  9 ['Hadoop', 'Java', 'MapReduce', 'Big Data']
  #+end_example

- Find out who has the most interests in common with a given user:
  1. Iterate over the user's interests.
  2. For each interest, iterate over the other users with that interest.
  3. Keep count of how many times we see each other user.

- In code:
  #+begin_src python :results silent
    def most_common_interests_with(user):
        return Counter(
            interested_user_id
            for interest in interests_by_user_id[user["id"]] # iterate over interests
            for interested_user_id in user_ids_by_interest[interest] # check other users
            if interested_user_id != user["id"]
        )
  #+end_src

- Check for Hero (0):
  #+begin_src python
    print(most_common_interests_with(users[0]))
  #+end_src

  #+RESULTS:
  : Counter({9: 3, 1: 2, 8: 1, 5: 1})

** IN PROGRESS Exploring Salary Data

- Run the code blocks above and check the environment with the Python
  equivalent of R's ~ls~, the =globals()= function: =print= its value as a
  list comprehension:
  #+begin_src python
    [print(_) for _ in globals()]
  #+end_src

- You are asked by the VP of Public Relations (PR) to provide facts
  about the earnings of the users in the network.

- You're given an anonymized dataset containing each user's ~salary~ (in
  US$) and ~tenure~ in the company (in years):
  #+begin_src python
    salaries_and_tenures = [(83000, 8.7), (88000, 8.1),
                            (48000, 0.7), (76000, 6),
                            (69000, 6.5), (76000, 7.5),
                            (60000, 2.5), (83000, 10),
                            (48000, 1.9), (63000, 4.2)]
    [print(_) for _ in salaries_and_tenures]
  #+end_src

- What type of data structure is this?
  #+begin_src python
    print(type(salaries_and_tenures)) # list
    print(type(salaries_and_tenures[0]))  # tuple
  #+end_src

- Let's plot the data. What would be a good type of plot?
  #+begin_quote
  The data contain Salary by years of experience for different
  users. Two plots suggest themselves:
  1) a scatterplot of salary [$] vs. experience [yrs]
  2) a histogram showing the distribution of salaries across users.
  3) a sorted bargraph showing the highest and lowest salaries.
  #+end_quote

- All plots are contained in ~matplotlib.pyplot~, and we need to install
  and/or load this module:
  #+begin_src python :results silent
    import matplotlib.pyplot as plt
  #+end_src

- If you're not on the console, you don't have auto-completion (though
  you could add that as a plugin to Emacs), so better make a copy of
  the list:
  #+begin_src python

  #+end_src

- Remember how to extract the tuple's elements - that's all you'd need for R:
  #+begin_src python

  #+end_src

- However, in Python, you can "unpack" a list of tuples with the =zip=
  function and the =*= operator:
  #+begin_src python

  #+end_src

- That's all we need for the Scatterplot of salaries vs. tenures:
  #+begin_src python :file scatterplt.png :python python3 :session *Python* :results output graphics file :exports both

  #+end_src

- You can get it more cheaply especially for small datasets like this
  one, with a =for= loop, plotting one point at a time:
  #+begin_src python :file scatterplt2.png :python python3 :session *Python* :results output graphics file :exports both

  #+end_src

- For the histogram that shows the distribution of salaries from the
  list of tuples, extract the salaries using a list comprehension:
  #+begin_src python

  #+end_src

- Plot with =plt.hist=:
  #+begin_src python :file histplt.png :python python3 :session *Python* :results output graphics file :exports both

  #+end_src

- For the barplot that shows the salaries and/or experiences sorted in
  increasing order, you can use a =lambda= function inside =sorted=:
  #+begin_src python

  #+end_src

- Now you can =zip= the ~sorted_salaries~ to extract the sorted ~salaries~:
  #+begin_src python

  #+end_src

- Create the bar graph:
  #+begin_src python :file barplt.png :python python3 :session *Python* :results output graphics file :exports both

  #+end_src

- Let's do the same thing with the experiences:
  #+begin_src python

  #+end_src

- Plot the bar graph:
  #+begin_src python :file barplt2.png :python python3 :session *Python* :results output graphics file :exports both

  #+end_src

** TODO Checking paid accounts



** TODO Finding topics of interest

