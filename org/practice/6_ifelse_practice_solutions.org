#+TITLE: CONDITIONS AND LOOPS - CONDITIONAL STATEMENTS - IF ELSE - EXERCISES
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

This exercise file accompanies the [[https://github.com/birkenkrahe/ds2/blob/main/org/3_conditions.org][lecture]] on conditional
statements. Upon completion, upload it to Canvas.

* DONE Identify and pledge yourself

1) In Emacs, replace the placeholder ~[yourname]~ at the top of this
   file by your own name and write ~(pledged)~ next to it
2) Go with the cursor on the headline and hange the ~TODO~ label to ~DONE~
   by entering ~S-<right>~ ("Shift + right-arrow").

* DONE Create two vectors

#+begin_src R :results silent
  vec1 <- c(2,1,1,3,2,1,0)
  vec2 <- c(3,8,2,2,0,0,0)
#+end_src

* DONE =if= and compound Boolean operators for vectors

Without executing them, determine which of the following ~if~
statements would result in the string being printed to the
console. Then confirm your answers in R.

/Tip:/ the ~all~ functions checks if all of its logical argument values
are true.

** Task 1
#+begin_example R
  if(vec1[1]+vec2[2]==10) cat("Print me!\n")
#+end_example

Solution: 2+8 = 10 == 10 (TRUE)
#+begin_src R
  if(vec1[1]+vec2[2]==10) cat("Print me!\n")
#+end_src

#+RESULTS:
: Print me!

** Task 2
#+begin_example R
  if(vec1[1]>=2&&vec2[1]>=2){cat("Print me!\n")}
#+end_example

Solution: 2 >= 2 and 3 >= 2 (TRUE)
#+begin_src R
  if( vec1[1] >= 2 && vec2[1] >= 2) cat("Print me!\n")
#+end_src

#+RESULTS:
: Print me!

** Task 3
#+begin_example R
  if(all((vec2-vec1)[c(2,6)]<7)){cat("Print me!\n")}
#+end_example

Solution: vec2[2]-vec1[2]=8-1=7 and vec2[6]-vec1[6]=0-1=-1 (FALSE)
#+begin_src R
  x <- (vec2-vec1)[c(2,6)] # this is a pair
  x
  all(x < 7) # first element is not smaller than 7
  if(all((vec2-vec1)[c(2,6)]<7)) {
    cat("Print me!\n")
  } else {
    cat("Nope\n")
  }
#+end_src

#+RESULTS:
: [1]  7 -1
: [1] FALSE
: Nope

** Task 4
#+begin_example R
  if(!is.na(vec2[3])){cat("Print me!\n")}
  #+end_example

Solution: 2 != NA => FALSE so !FALSE is TRUE
#+begin_src R
  if(!is.na(vec2[3])){cat("Print me!\n")}
#+end_src

#+RESULTS:
: Print me!

  
* DONE Use =if= and =else= with vectors

** Task 5

Using ~vec1~ and ~vec2~, write and execute a line of code that
multiplies the corresponding elements of the two vectors together
if their sum is greater than ~3~. Otherwise, the code should simply
sum the two elements.

*Condition:* do not use ~for~ or ~apply~ functions to solve this exercise
but only conditional functions like ~if~, ~else~, ~ifelse~).

Solution 1:
#+begin_src R
  vec1
  vec2
  ifelse(test = vec1 + vec2 > 3,
         yes  = vec1 * vec2,
         no   = vec1 + vec2)
#+end_src

#+RESULTS:
: [1] 2 1 1 3 2 1 0
: [1] 3 8 2 2 0 0 0
: [1] 6 8 3 6 2 1 0

** Task 6

Do this without =ifelse=. Write the solution as pseudocode first, then
code it in R.

Solution:

Pseudocode:
#+begin_example 
## Algorithm: multiply/sum vectors
## Input: two numeric vectors of the same length
## Output: product of elements whose sum is > 3 otherwise sum of elements

Begin
   ## loop over elements
   ##   check condition: sum of elements greater than 3?
   ##   if condition TRUE
   ##      multiply elements
   ##   otherwise
   ##      sum elements
   ## print result
#+end_example

Code with =for= loop:
#+begin_src R

  ## check if vectors are defined and are of equal length
  ls() # vectors defined
  length(vec1)==length(vec2) #vectors have same length
  vec <- vector() # initialize empty vector

  ## loop over elements
  for (i in 1:length(vec1)) {
    ## check condition: sum of elements greater than 3?
    add <- vec1[i] + vec2[i]
    ##   if condition TRUE multiply elements
    if (add > 3) {
      vec <- append(vec,vec1[i] * vec2[i])
    } else {
      vec <- append(vec,add)
    }
  }
  ## print result
  vec
#+end_src

#+RESULTS:
: [1] "add"   "bar"   "foo"   "hello" "idx"   "vec1"  "vec2"  "x"
: [1] TRUE
: [1] 6 8 3 6 2 1 0

Another solution is closer to =ifelse=:
#+begin_src R
  idx <- vec1 + vec2 > 3
  add <- vec1 + vec2; add
#+end_src

#+RESULTS:
: [1] 5 9 3 5 2 1 0
