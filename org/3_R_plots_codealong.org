#+TITLE: Reviewing Python and R basics
#+AUTHOR: Marcus Birkenkrahe (pledged)
#+SUBTITLE: Intro to Advanced Data Science - DSC 205 - Lyon College Spring'24
#+DATE: Time-stamp: <2024-02-09 07:23:51 Birkenkrahe>
#+STARTUP: overview hideblocks indent :
#+PROPERTY: header-args:R :session *R* :results output
#+PROPERTY: header-args:python :session *Python* :results output :python python3
* README

In this file, we review and practice plotting with base R.

* Bonus: Math plots with R

- This section is prompted by a Calculus II exercise that I came
  across. Especially when dealing with trigonometric functions, it can
  be useful to plot them and get a visual on the problem.

- Plot a complicated function, e.g. $f(x) = sin^2(x) sin(2x)$:
  1) Base R (~package:base~) has trigonometric functions pre-loaded. Check
     ~?sin~ on the command line to see documentation and function names.
  2) To plot, all you need is the ~plot~ function.
  3) In Emacs, you can change the code block header arguments. The
     following metadata will store the result in a file ~graph.png~ and it
     will also link to the file in the =#+RESULTS= output. If you don't do
     this, the plot will appear in a separate window.
     #+begin_example
     #+begin_src R :results output graphics file :file graph.png
     #+end_example

- Here's the code that opens the graph in a separate window:
  #+begin_src R :session *R* :results silent :exports both
    ## function definition

    ## arguments (independent variable)

    ## plot as line plot

  #+end_src

- Here's the code with the altered header line and with some
  customization:
  #+begin_src R :session *R* :results output graphics file :file ../img/func.png :exports both
    ## function definition

    ## arguments (independent variable)

    ## plot as line plot

  #+end_src

- Here is the minimal code without function, in one line:
  #+begin_src R :session *R* :results output graphics file :file ../img/func1.png :exports both

  #+end_src

* Plotting: problem

For our test data, the LMS returns the following type of reports (open
these in your browser with C-c C-o):
- [[https://github.com/birkenkrahe/ds205/blob/main/img/test_1.png][Test_1]]
- [[https://github.com/birkenkrahe/ds205/blob/main/img/test_2.png][Test 2]]

We want to:
1. Remake the histograms for both tests.
2. Display histograms separately as two graphs in one panel.
3. Display histograms together dodged or stacked in one panel.
4. Create boxplots and display them to compare results easily.

We'll also have to look at the necessity to remove missing values.

* Data preparation

To not have to wade through previous scripts, store the URL in the
variable ~url~, import the data, and remove the last row as before:
#+begin_src R

#+end_src

* Histogram in R

A histogram plots frequencies over a continuous set of values.

- Let's make one for ~df$t1~. For the header arguments, we need:
  ~:results output graphics file :file histR_t1.png~ - the graph will then
  be linked here and it will be saved to ~t1.png~:
  #+begin_src R :session *R* :results output graphics file :file histR_t1.png :exports both :noweb yes

  #+end_src

- You can check from here if there's a file (on Windows, you need to
  replace =ls= by =DIR=):
  #+begin_src R :session *R* :results output :exports both :noweb yes

  #+end_src

- To put the histograms for both tests in one panel, we use the ~par~
  function and specify the number and orientation of sub-graphs with
  =mfrow= - notice that we now save to the file ~histR_t1t2.png~:
  #+begin_src R :session *R* :results output graphics file :file histR_t1t2.png :exports both :noweb yes

  #+end_src

- Now, our scale program becomes obvious: the datasets have different
  maximum point values. This affects the x-axis. The quickest way to
  do this is to set the x-axis limits with =xlim=:
  #+begin_src R :session *R* :results output graphics file :file histR_t1t2_2.png :exports both :noweb yes
    par(mfrow=c(2,1)) # create a 2 x 1 panel

    par()
  #+end_src

- This last result shows clearly that the peformance has decreased
  drastically between test 1 and test 2. A clearer picture will result
  from a boxplot (below).

- One last improvement concerns the bin values: they are not close
  enough for a test where each of the questions has 1 point. To change
  that, you can set the =breaks= manually:
  #+begin_src R :session *R* :results output graphics file :file histR_t1t2_3.png :exports both :noweb yes
    par(mfrow=c(2,1)) # create a 2 x 1 panel

    par()
  #+end_src

- Another issue (not for these data) could be if we have different
  number of participants. We might want to align the y-axis as well to
  make sure that we are looking at comparable datasets.

- However, we have not yet reproduced the LMS graphs: they show the
  results in percent, which automatically scales the point results.

- We scale the vectors in the dataframe themselves, and we remove the
  'id' column since we don't need it here at all. Vectorisation rules!
  #+begin_src R :session *R* :results output :exports both :noweb yes

  #+end_src

- Now we redo the last plot but we do no longer need to worry about
  the limits or the breaks - make sure to change the name of the file:
  #+begin_src R :session *R* :results output graphics file :file histR_t1t2_4.png :exports both :noweb yes
    par(mfrow=c(2,1)) # create a 2 x 1 panel

    par()
  #+end_src

- The original plots do not look like histograms but like barplots
  with exact values for the percentage, but as the data show, there
  are percentage ranges, which is why the histogram is more
  appropriate.

* Boxplot in R

A boxplot is a graph that illustrates the statistical =summary=
results.

- The creation of panels and subpanels, the customization and the
  scaling carries over from the last histogram, since these are
  graphical parameters. We first create a quick and dirty boxplot, and
  customize in the next step:
  #+begin_src R :session *R* :results output graphics file :file box_t1t2.png :exports both :noweb yes
    par(mfrow=c(2,1)) # create a 2 x 1 panel

    par()
  #+end_src

- These results are hard to compare. We're going to:
  1. turn the boxplots on their side with the parameter =horizontal=TRUE=
  2. label the x-axis as befre with ~xlab~
  3. remove the standard x-axis annotation with ~xaxt='n'~
  4. redefine the x-axis ticks with the =axis= function.
  #+begin_src R :session *R* :results output graphics file :file box_t1t2_final.png :exports both :noweb yes
    par(mfrow=c(2,1)) # create a 2 x 1 panel
    ## boxplot 1

    ## redraw axis data

    ## boxplot 2

    ## redraw axis data

    par()
  #+end_src

* TODO Summary and glossary
