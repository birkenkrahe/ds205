#+TITLE: Agenda - Introduction to advanced data science
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Lyon College, Spring 2024
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+property: header-args:python :results output :noweb yes :session *Python* :exports both
#+property: header-args:R :results output :noweb yes :session *R* :exports both
* Week 1: Comparing R and Python
#+ATTR_HTML: :WIDTH 400px:
[[../img/cover.png]]

- [X] Course details: see [[https://lyon.instructure.com/courses/2111/assignments/syllabus][syllabus]] and [[https://lyon.instructure.com/courses/2111/discussion_topics/8683][Jan 13 announcement]].
- [X] Course materials: [[https://github.com/birkenkrahe/ds205][GitHub]]. See also [[https://lyon.instructure.com/courses/2111/pages/course-links][course links]] in Canvas.
- [ ] *Test:* Review R basics (cp. DataCamp introduction).
- [ ] *Test*: Review Python basics (cp. DataCamp Python for R Users).
- [X] *Practice*: Getting back to GNU Emacs & Org-mode (tutorial).

** Julius has spoken

| Feature            | R                                                                  | Python                                                                 |
|--------------------+--------------------------------------------------------------------+------------------------------------------------------------------------|
| Primary Focus      | Statistical analysis and data visualization.                       | General-purpose programming with strong support for data analysis.     |
| Language Type      | Domain-specific language for statistics.                           | General-purpose programming language.                                  |
| Learning Curve     | Steeper for those not familiar with statistical analysis.          | Generally considered easier for beginners.                             |
| Community          | Strong in academia, statistics, and bioinformatics.                | Broad and diverse, strong in web development, AI, and data science.    |
| Data Analysis      | Excellent for complex statistical analyses.                        | Very good for data analysis with libraries like pandas and numpy.      |
| Data Visualization | Superior capabilities with ggplot2 and other packages.             | Good with libraries like matplotlib and seaborn.                       |
| Libraries          | Comprehensive libraries for statistics and plotting (e.g., dplyr). | Extensive libraries for various applications beyond data analysis.     |
| IDE Support        | RStudio is a powerful and popular IDE for R.                       | Multiple IDEs available, including Jupyter Notebook and PyCharm.       |
| Extensibility      | Can call Python, C, C++, and Fortran code.                         | Can call C, C++, and R code, among others.                             |
| Performance        | Generally slower than Python, but can be improved with Rcpp.       | Faster, with the ability to use Cython for performance-critical code.  |
| Deployment         | More challenging to deploy in production environments.             | Easier to deploy, with various frameworks and tools for deployment.    |
| Machine Learning   | Growing number of packages (e.g., caret, xgboost).                 | Extensive machine learning libraries (e.g., scikit-learn, TensorFlow). |
| Documentation      | Good, especially for statistical methods.                          | Extensive and often includes examples.                                 |
| Community Support  | Active forums and mailing lists.                                   | Very active communities on Stack Overflow, GitHub, etc.                |

** Individual term projects

- Identify a Python or R package that you explore during the term.
- 1st sprint: Identify research questions for the package.
- 2nd sprint: Develop an exploration and testing methodology.
- 3rd sprint: Summarize results with an abstract.
- 4th sprint: Present with interactive exercises.
- Submit Emacs Org-mode file and any other materials.
- Turn the project in an item for your resume portfolio!

** Announcement: Journal club!

Data science enthusiasts: there will be a "journal club" on Wednesday
12-12:45 pm in Derby room 209. We'll put the papers in a GDrive.

For the first journal club on Januar 31, I'd like to submit my last
non-technical paper, "The role of AI coding assistants: revisiting the
need for literate programming in computer and data science education."
([[https://drive.google.com/file/d/1OonJ1pesK2iRP3JDf4MoBRgg4NKk91yU/view?usp=sharing][Link]]) This paper will be presented at INTED'24, the 18th annual
International Technology, Education and Development Conference in
Valencia (Spain), March 4-6.

You can get some background on this topic from the wall poster in
front of my office, about the paper that I wrote before this one.
#+ATTR_HTML: :WIDTH 400px:
[[../img/MDPI_2023_BIRKENKRAHE_poster.pptx.png]]

*Caveat:* in a journal club, you discuss other people's papers and not
your own - I will try to simulate that by discussing my paper as if
someone else had written it, and also using AI to deliver a critique.

** 10 top tips: How to study programming languages

...when using DataCamp and/or when reviewing a test:

1) Read the texts and the instructions carefully.
2) Take notes if you can.
3) Recreate all code in your IDE before submitting it.
4) This will take at least twice as long as you expect.
5) You will learn a lot of extras along the way.
6) Your programmer's muscle memory will be improved.
7) Look at the classroom material to identify overlaps.
8) Look stuff up in books or in online documentation.
9) Review DataCamp lessons daily using practice questions.
10) Review tests monthly by completing them again.


** Announcement: UAMS College of Public Health student session

Monday, 29 January 12-12:45 PM via Zoom: http://tinyurl.com/UAMSCPUH
Passcode: 941969
#+ATTR_HTML: :WIDTH 400px:
[[../img/UAMS_student_session.png]]

** Test review - base R & conversion to R

Python test results:
#+begin_src R :results output :session *R* :exports both :noweb yes
  paste("Python test average", mean(c(77.5,97.5,56.67,75)))
  paste("R test average", mean(c(75,80,55,70)))
#+end_src

#+RESULTS:
: [1] "Python test average 76.6675"
: [1] "R test average 70"

1. Open Emacs.
2. Using ~M-x eww~, download the practice file from GitHub:
   [[http://tinyurl.com/dsc205start][tinyurl.com/dsc205start]] - save it with ~C-x C-w~
3. Navigate to your home directory (~~/~).
4. Using ~M-x eww~, download ~.emacs~ from GitHub:
   https://tinyurl.com/EmacsLyon - save it with ~C-x C-w~
5. Open the file ~(C-x C-f)~ and run it ~(M-x eval-buffer)~
6. Open the practice file and code alongside me.
7. Put your name and "(pledged)" next to it at the top after ~#+author:~
8. Submit the completed practice file to [[https://lyon.instructure.com/courses/2111/assignments/23788][Canvas]].

* Week 2: Conditionals and work flow in R & work environment
#+ATTR_HTML: :WIDTH 400px:
[[../img/datascientist.png]]

Starting this week, project a more powerful data scientist profile!
New Year's resolution: look as fit and fierce as the guy in the photo!

- [X] Review: DataCamp lesson "Conditionals and control flow" in R
- [X] New content: Fun facts!
- [ ] Review: Entry test Python/R (practice sheet) & Emacs exercise

** DataCamp review questions

(AI-generated from the lesson slides):

1. What are relational operators in R and give an example?
   #+begin_notes
   Relational operators are used to compare values in R. An example is
   the equality operator ~==~, which checks if two values are
   equal. For instance, ~TRUE == TRUE~ evaluates to ~TRUE~.
   #+end_notes

2. How does the inequality operator work in R? Provide an example.
   #+begin_notes
   The inequality operator ~!=~ in R checks if two values are not
   equal. For example, ~TRUE != FALSE~ evaluates to ~TRUE~, indicating
   that the two values are indeed different.
   #+end_notes

   #+begin_src R
     TRUE != FALSE
   #+end_src

3. Can relational operators be used with vectors in R? Give an
   example.
   #+begin_notes
   Yes, relational operators can be applied to vectors in R. For
   example, if ~linkedin~ is a vector ~(16, 9, 13, 5, 2, 17, 14)~, the
   expression ~linkedin > 10~ would return a vector of logical values
   indicating whether each element in ~linkedin~ is greater than 10.
   #+end_notes
   #+begin_src R :results output :session *R* :exports both :noweb yes
     linkedin <- c(16, 9, 13, 5, 2, 17, 14)
     linkedin > 10
   #+end_src

   #+RESULTS:
   : [1]  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE

4. What are the logical operators in R and how do they work?
   #+begin_notes
   The logical operators in R include AND (~&~), OR (~|~), and NOT
   (~!~). The AND operator returns ~TRUE~ if both operands are true, the
   OR operator returns ~TRUE~ if at least one operand is true, and the
   NOT operator negates the truth value of its operand. For example,
   ~TRUE & FALSE~ evaluates to ~FALSE~, ~TRUE | FALSE~ to ~TRUE~, and ~!TRUE~ to
   ~FALSE~.
   #+end_notes
   #+begin_src R :results output :session *R* :exports both :noweb yes
     c(TRUE,TRUE,TRUE)  & c(FALSE,TRUE,TRUE)
     c(TRUE,TRUE,TRUE) && c(FALSE,TRUE,TRUE)
   #+end_src

   #+RESULTS:
   : [1] FALSE  TRUE  TRUE
   : [1] FALSE
   : Warning messages:
   : 1: In c(TRUE, TRUE, TRUE) && c(FALSE, TRUE, TRUE) :
   :   'length(x) = 3 > 1' in coercion to 'logical(1)'
   : 2: In c(TRUE, TRUE, TRUE) && c(FALSE, TRUE, TRUE) :
   :   'length(x) = 3 > 1' in coercion to 'logical(1)'

5. How do you write a conditional statement in R?
   #+begin_notes
   A conditional statement in R can be written using ~if~, ~else if~, and
   ~else~ clauses. For example, ~if (x < 0) { print("x is a negative
   number") } else { print("x is either a positive number or zero") }~
   will print a message based on the value of ~x~.
   #+end_notes
   #+begin_src R :results output :session *R* :exports both :noweb yes
     x <- 0
     if (x < 0) {
       print("x is a negative number")
     } else {
       print("x is either a positive number or zero")
     }
   #+end_src

   #+RESULTS:
   : [1] "x is either a positive number or zero"

** Given any thought to your projects?

You'll have to present your proposal in 3 weeks!

What are you leaning towards?
- Packages that help me work with hospital birth data
- Packages that help me analyse video game player data
- Packages that help analyse financial data especially stocks

What will you need to do?
- Identify an interesting package
- Find data to experiment with
- What makes it special or unique?
- How would you apply it? ("Use cases")
- Comparing with other (similar) packages
- Who uses this package?
- How easy is it to use it?
- Is it beginner-friendly is it?
- What should you never use it for? (Performance, maintenance, data)
- Does it lend itself to an interactive exercise?
- If it's an R/Python packages, is there an Python/R equivalent

** Fun facts
#+ATTR_HTML: :WIDTH 400px:
[[../img/funfact.png]]

R:
#+begin_notes
R was named partly after its (NZ) creators, Ross Ihaka and Robert
Gentleman, which also playfully hints at its predecessors, S and
S-PLUS languages. Another fun fact: I've lived in NZ.
#+end_notes

And also: how can you check/change your working directory in R?
#+begin_src R :results output :session *R* :exports both :noweb yes
  ## Change the working directory to 'path_to_new_directory'
  setwd('path_to_new_directory')

  ## To confirm the current working directory has been changed, you can use getwd()
  print(getwd())
#+end_src

Python:
#+begin_notes
Python was named after the British comedy sQeries "Monty Python's
Flying Circus," not the snake. Its creator, Guido van Rossum, was a
fan of the show and wanted a name that was short, unique, and slightly
mysterious.
#+end_notes

And also: how can you check/change your working directory in Python?
#+begin_src python :results output :session *Python* :exports both :noweb yes
  import os

  # Change the working directory to 'path_to_new_directory'
  os.chdir('path_to_new_directory')

  # To confirm the current working directory has been changed, you can use getcwd()
  print("Current Working Directory: ", os.getcwd())
#+end_src

* Week 3: Python's Matplotlib & R factors & Python Categories
#+ATTR_HTML: :WIDTH 600px:
[[../img/matplotlib.png]]

- [X] Moved DataCamp lesson deadline to Feb 9
- [X] Review: Entry test Python/R (practice sheet) & Emacs exercise (cont'd)
- [X] DataCamp: Python's =matplotlib= (Wednesday)
- [X] More fun facts! (Friday) - check out mermaid.live

** How to practice for brutal multiple choice tests

- Check DataCamp assignments since the last test and review
- Check Google chat especially for review questions
- Create a glossary of R and Python keywords
- DataCamp (customized) practice questions (minimum daily)
- Review the codealong/practice files (reproduce code)
- Review using total recall (flashcards) (Anki)
- Use mindmaps or other graphical representations
- Approach the same set of topics from different angles

* Week 4: A really short review of R and Python
#+ATTR_HTML: :WIDTH 400px:
[[../img/midnightoil.webp]]

/Image: a new data science podcast/

- Monday: getting and importing the data
- Wednesday: transforming and analyzing the data
- Friday: plotting the data
- Friday: deadline for next DataCamp lesson (R loops)
- Will post review questions (chat) & PDF script (GitHub) after class.
- Project proposal due next Monday! (Template to follow on Canvas)
- Coming up: another test & writing functions in R and Python
- Bonus assignment (details to follow): install/enable WSL on Windows

Add this line to your review.org file header, too:
#+begin_example
#+STARTUP: overview hideblocks indent :
#+end_example

** What happened on Monday? review

1. 3 things you want to do with data?
   #+begin_notes
   EDA = Exploratory Data Analysis
   - View data (read and open in R or Python)
   - Import data (download and import to R or Python)
   - Analyse data (clean and transform for example scale)
   #+end_notes

2. How should you upload files to Emacs (from the web)?
   #+begin_notes
   With the built-in eww browser (~M-x eww~)
   #+end_notes

3. What are we looking for in raw data?
   #+begin_notes
   - Does the file have a header?
   - What data types are present? (numeric or string)
   - How are decimals represented?  (Comma or point)
   - Are there missing values? (~NA~ in R, ~NaN~ in Python)
   #+end_notes

4. Which packages are loaded in R?
   #+begin_notes
   - With the ~search()~ function
   #+end_notes

5. How do you load a package into R and Python?
   #+begin_notes
   - Python: ~import~ or ~from [pkg] import [function]~
   - R: ~library("[pkg]")~
   #+end_notes
   #+begin_src R
     search()  ## there's no MASS package loaded
     library("MASS")  ## loads the MASS package
     search() ## now the package is loaded
   #+end_src

   6. What happens when you first start R on any given day?
   #+begin_notes
   - Emacs ask you where you want to start the R console
   - The R console (~*R*~) will be a separate buffer
   - It runs in the background
   - Python does not need an explicit confirmation
   #+end_notes

7. What types of function parameters are there and how do they differ?
   #+begin_notes
   For example ~read.csv~ # check the help ~?read.csv~ or ~args~
   #+end_notes
   #+begin_src R
     args(read.csv)
   #+end_src

   #+RESULTS:
   : function (file, header = TRUE, sep = ",", quote = "\"", dec = ".",
   :     fill = TRUE, comment.char = "", ...)
   : NULL

   If you've forgotten everything except 'read', use ~??~:
   #+begin_src R
     ??read
   #+end_src

** Bonus exercise until Monday

Here is a [[https://lyon.instructure.com/courses/2111/assignments/24871][bonus exercise]] for extra points until the next session:
#+begin_quote
In the R and Python review that we've been working on, the dataset
contains missing value and one record (with the ID 2190) that belongs
to a test user and needs to be removed.

Your mission (should you choose to accept it) is to transform the
dataset into a data frame where the last row (for the test user) is
deleted.

Next, compute the arithmetic average (`mean`) for test 1, for test 2,
and for test 1 and test 2. Make sure that the missing values are not
part of the averaging (they're not 0 values!).

Do this in R and in Python. Simply continue the file that you've been
working in and submit it here as an Org-mode file. You have to meet
the deadline for these bonus points because we're going to discuss the
solution on Monday.
#+end_quote

* Week 5: +Writing functions in R+ Transforming pandas DataFrame in Python
#+attr_html: :width 400px
[[../img/overworked.png]]

Overworked? Overloaded with mastering R and Python?

Never fear! Help is near!

** Emacs special
#+attr_html: :width 400px:
[[../img/guinea_pigs.png]]

If you're working with code blocks, you want to Amake your life easier:
1) add to ~org-tempo-keyword-alist~ (e.g. ~<S~ for startup, ~<H~ for images)
2) add to ~org-structure-template-alist~ (e.g. ~<p~ for python, ~<sqlite~
   for sqlite, ~<cc~ for C, ~<cpp~ for C++, ~<r~ for R code blocks, etc.)
3) Begin by looking these Emacs Lisp variables up: ~C-h v~ + variable
   name.
4) You can use ~C-h~ also to check key bindings (~k~) or functions (~f~).

** DataCamp assignment changes

- You're finished with Intermediate Python today (for now)
- What remains is logic & loops (will do that later)
- You're starting on functions in R now (because it's easy)
- The last chapter of "[[https://app.datacamp.com/learn/courses/intermediate-r][Intermediate R]]" (utilities) is a bonus.
- We'll continue looking at plots in R and Python all of next week.
- We'll use function definitions from R and Python for that.
- There will be small bonus exercises - double points for R and Python

* Week 6: Transforming dataframes in R and getting summary statistics
#+attr_html: :width 400px:
[[../img/week6.png]]

*Plan:*
- Transformation of data frames in R with code along
- Plotting in R with code along: histograms and boxplots

** Test results so far (Canvas):
#+attr_html: :width 400px:
[[../img/ds_test_1.png]]

#+attr_html: :width 400px:
[[../img/ds_test_2.png]]

- Use the whole time! The student with 90% used 60 min, the student
  with 85% used 30 min, and the student with 60% used 15 minutes!

** Transformation of data frames in R (code along)

*Review questions (Python):*

1) You know how to check for missing values in a =numpy= array and in a
   =pandas= data frame.
   #+begin_example python
     pd.isna(np.nan)
     np.isnan(np.nan)
   #+end_example
2) You know how to create a flag vector for the ~'ID'~ column of a
   dataframe ~df~, e.g. to check if ID < 10.
   #+begin_example python
     df.ID < 10
   #+end_example
3) You know how to use the flag vector to extract data frame values.
   #+begin_example python
     idx = df.ID < 10
     df[idx]
   #+end_example
4) You know how to get the indices of the data frame elements that
   satisfy the flag condition.
   #+begin_example python
     np.where(df['ID'] < 10)[0]
   #+end_example
5) You know how to get data frame structure information.
   #+begin_example python
     df.info()
     df.dtypes
   #+end_example
6) You know how to check if any data frame rows of the ID column
   satisfy the condition to be < 10.
   #+begin_example python
     any(df['ID'] < 10)
   #+end_example
7) You know how to check the top or the bottom of a data frame ~df~.
   #+begin_example
     df.head()
     df.tail()
   #+end_example

Now, load the code along file and code along for the remainder of this
session on transforming data frames - with R:
[[http://tinyurl.com/transform-org][tinyurl.com/transform-org]].

* Week 7: R plots, +utilities, and =apply= family of functions+
#+attr_html: :width 400px:
[[../img/conflict.png]]

- [X] Python's =describe= completed
- [X] Addendum to R's =summary= - don't use the ~ID~ column
- [X] Plotting in R - histograms, barplots and boxplots

** Create R graphics code blocks quickly

1) ~C-h v org-structure-template-alist~
2) ~Customize~
3) ~INS~ key: ~rg~, value:
   #+begin_example
   src R :file :results output graphics file :session *R* :exports outputx
   #+end_example
4) ~APPLY AND SAVE SETTINGS~
5) ~<rg TAB~

** Review plotting histograms, barplots, tables

1) Check that an R object (e.g. ~url~) was created.
   #+begin_src R
     ls()
   #+end_src

   #+RESULTS:
   : [1] "cols"   "df"     "sol"    "solar"  "tbl"    "tweets" "types"  "url"

   2) You have a dataframe ~df~ with two columns. Remove the 2nd column.
      #+begin_src R
        df <- data.frame("A"=letters[1:5],"B"=1:5)
        df
        str(df)
        df[-2]   # retains a 1-column dataframe (dataframe operation)
        df[,-2]  # retains only a vector (row-by-row operation)
      #+end_src

      #+RESULTS:
      #+begin_example
        A B
      1 a 1
      2 b 2
      3 c 3
      4 d 4
      5 e 5
      'data.frame':     5 obs. of  2 variables:
       $ A: chr  "a" "b" "c" "d" ...
       $ B: int  1 2 3 4 5
        A
      1 a
      2 b
      3 c
      4 d
      5 e
      [1] "a" "b" "c" "d" "e"
      #+end_example

3) You have a dataframe ~df~ with two columns and five rows. Remove all rows with ~NA~.
   #+begin_src R
     df <- data.frame("A"=letters[1:5],"B"=c(1,2,NA,4,5))
     df
     na.omit(df)
   #+end_src

   #+RESULTS:
   #+begin_example
     A  B
   1 a  1
   2 b  2
   3 c NA
   4 d  4
   5 e  5
     A B
   1 a 1
   2 b 2
   4 d 4
   5 e 5
   #+end_example

4) You have a vector ~c(1,2,2,3,4,5,5,5,6,9)~ How would you create a histogram?
   #+begin_src R :file hist.png :session *R* :results output graphics file :exports both :noweb yes
     foo <- c(1,2,2,3,4,5,5,5,6,9)
     hist(x = foo, breaks=10)
   #+end_src

   #+RESULTS:
   [[file:hist.png]]

   #+begin_quote
   You might want to store this header argument so that you can create
   graphics code blocks in R easily (=org-structure-template-alist)=:
   [[../img/graphics_codeblock.png]]
   #+end_quote

5) What's the contingency table for that vector?
   #+begin_src R
     table(foo)
   #+end_src

   #+RESULTS:
   : foo
   : 1 2 3 4 5 6 9
   : 1 2 1 1 3 1 1

6) What's the structure of the contingency table?
   #+begin_src R
     tbl <- table(foo)
     str(tbl) # integer values `as.integer(tbl)` and `names(tbl)`
     as.integer(tbl) # numeric integer vector
     names(tbl)  # character vector
   #+end_src

   #+RESULTS:
   :  'table' int [1:7(1d)] 1 2 1 1 3 1 1
   :  - attr(*, "dimnames")=List of 1
   :   ..$ foo: chr [1:7] "1" "2" "3" "4" ...
   : [1] 1 2 1 1 3 1 1
   : [1] "1" "2" "3" "4" "5" "6" "9"

7) Make a barplot for this table.
   #+begin_src R :file bar.png :session *R* :results output graphics file :exports both :noweb yes
     barplot(height = tbl)
   #+end_src

   #+RESULTS:
   [[file:bar.png]]

8) Turn the table into a dataframe.
   #+begin_src R :session *R* :results output :exports both :noweb yes
     ## method 1
     <<     df1 <- as.data.frame(tbl)
     colnames(df1) <- c('values','frequencies')
     df1

     ## method 2
     df2 <- data.frame('values'=names(tbl),'frequencies'=as.integer(tbl))
     df2
   #+end_src

   #+RESULTS:
   #+begin_example
     values frequencies
   1      1           1
   2      2           2
   3      3           1
   4      4           1
   5      5           3
   6      6           1
   7      9           1
     values frequencies
   1      1           1
   2      2           2
   3      3           1
   4      4           1
   5      5           3
   6      6           1
   7      9           1
   #+end_example

** Continue "Plotting in R - histograms, barplots, boxplots"      :progress:

To continue coding along, download, open and run:
[[https://raw.githubusercontent.com/birkenkrahe/ds205/main/org/3_R_plots_codealong.org][tinyurl.com/r-plots-org]].

** Review and Preview                                                 :test:

Write down what you think the answers are to these questions:

1) What do you think is the output of the command: ~str(search())~
   #+begin_src R
     str(search()) # Output is a character vector, values are loaded packages
   #+end_src

   #+RESULTS:
   :  chr [1:10] ".GlobalEnv" "ESSR" "package:stats" "package:graphics" ...

2) If ~df~ is a dataframe with 5 columns, what does ~names(df) <- 1:5~ do?
   #+begin_src R
     df <- data.frame(mtcars[1:5])
     names(df)
     names(df) <- 1:5 # overwrites column names with 1 to 5 as strings
     names(df)
   #+end_src

   #+RESULTS:
   : [1] "mpg"  "cyl"  "disp" "hp"   "drat"
   : [1] "1" "2" "3" "4" "5"

3) Does every vector also have =names=?
   #+begin_src R
     foo <- 1:10
     foo
     names(foo)
     names(foo) <- 1:10
     names(foo)
   #+end_src

   #+RESULTS:
   :  [1]  1  2  3  4  5  6  7  8  9 10
   : NULL
   :  [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10"

4) What's the input for =hist=?
   #+begin_src R :file Nile.png :session *R* :results output graphics file :exports both :noweb yes
     hist(Nile) # input: numeric distribution (time series)
   #+end_src

   #+RESULTS:
   [[file:Nile.png]]

   #+begin_src R
     str(Nile)
   #+end_src

   #+RESULTS:
   :  Time-Series [1:100] from 1871 to 1970: 1120 1160 963 1210 1160 1160 813 1230 1370 1140 ...

5) If ~h <- c(1,2,3,4)~, what will ~barplot(h)~ look like?
   #+begin_src R :file vecbar.png :session *R* :results output graphics file :exports both :noweb yes
     h <- c(1,2,3,4)
     barplot(h)
   #+end_src

   #+RESULTS:
   [[file:vecbar.png]]

6) If ~M <- matrix(1:4,nrow=2)~, what will ~barplot(M)~ look like?
   #+begin_src R
     M <- matrix(1:4,nrow=2)
     M
   #+end_src

   #+RESULTS:
   :      [,1] [,2]
   : [1,]    1    3
   : [2,]    2    4


#+begin_src R :file matrixbar.png :session *R* :results output graphics file :exports both :noweb yes
  barplot(M,beside=TRUE) # output: dodged by height
#+end_src

#+RESULTS:
[[file:matrixbar.png]]


#+begin_src R :file matrixbar1.png :session *R* :results output graphics file :exports both :noweb yes
  barplot(M) # output: stacked by height
#+end_src

#+RESULTS:
[[file:matrixbar1.png]]

* Week 8: Scope and calling functions in R and Python
#+attr_html: :width 400px:
[[../img/scope.webp]]

- [X] Popquiz - wasn't it great!

- Lecture: Calling functions & Scoping in R

- Download the codealong and practice files from GitHub:
  + [[http://tinyurl.com/4-R-codealong-org][tinyurl.com/4-R-codealong-org]]
  + [[http://tinyurl.com/4-R-practice-org][tinyurl.com/4-R-practice-org]]

- Test 3 available now until March 10 (30 questions/1 hour)

- Next DataCamp lesson (=apply=) deadline now March 10

* Week 9: if-else-switch-loops in R / 2nd sprint review
#+attr_html: :width 400px:
[[../img/week_9.png]]

- Back to Python: two new DataCamp assignments (if-else and loops)
- [[https://lyon.instructure.com/courses/2111/assignments/26166][2nd sprint review]] opened: literature review (all sources) - March 29

* Week 10: apply functions, ifelse, if, else
#+attr_html: :width 400px:
[[../img/week_10.png]]

** Announcements

- [[https://lyon.instructure.com/courses/2111/assignments/25562/edit?quiz_lti][Test 4]] available later this week - reviewing DataCamp (functions,
  apply), scoping, arguments, if-else conditional statements

- *DataCamp deadlines* changed and *bonus lesson* added (see [[https://lyon.instructure.com/courses/2111][Canvas]])

- Any questions on the upcoming literature ([[https://lyon.instructure.com/courses/2111/assignments/26166][2nd sprint]]) review?

- Quick question: do you need to reference software in your work? If
  you do it, how would you do that? ([[https://libguides.ecu.edu/c.php?g=1145002&p=8359973][Example]])


** Bonus: vectorized condition checks in Python

- In R, you need the function =ifelse= to test a condition for a
  vector. In Python, you can use the =all= function:
  #+begin_src python :python python3 :session *Python* :results output :exports both :comments both :tangle yes :noweb yes
    x = [1,2,3,4,5]  # vector definition

    ## selection statement
    if all(i < 5 for i in x):
        print("All elements in the vector are less than 5")
    else:
        print("Some elements in the vector are not less than 5")
  #+end_src

  #+RESULTS:
  : Some elements in the vector are not less than 5


** Test preview and DataCamp review

1. What does the =sapply= function do? Can you think of an example?
   #+begin_src R
     sapply(X=1:4, FUN=sqrt)  # returns a vector
   #+end_src

   #+RESULTS:
   : [1] 1.000000 1.414214 1.732051 2.000000

2. What are the alternatives to =sapply=?
   #+begin_src R
     for (x in 1:4) print(sqrt(x)) # for loop
     unlist(lapply(X=1:4, FUN=sqrt)) # lapply
   #+end_src

   #+RESULTS:
   : [1] 1
   : [1] 1.414214
   : [1] 1.732051
   : [1] 2
   : [1] 1.000000 1.414214 1.732051 2.000000

3. Which of the following function calls will work for the function
   ~hello~ defined below, and what will the output be?
   #+name: hello_function
   #+begin_src R :results silent
     ## function definition
     hello <- function(x=TRUE,y) {
       if(x) {
         paste("Hello",y)
       } else {
         print("Hello world")
       }
     }
   #+end_src

   Function calls:
   - ~hello("Marcus")~  - won't work (positional arg in wrong position)
   - ~hello(y="Marcus")~ - works because arg is exact and 1st arg has default
   - ~hello(100,"Marcus")~  - x becomes 100 (TRUE) so it works
   - ~hello(FALSE)~ - works because y (NA) is never used!
   - ~hello(FALSE,"Marcus")~ - prints hello world (y never used)
   - ~hello(T)~  - error because y is needed and missing

   #+begin_src R
     <<hello_function>>
     hello(T)
   #+end_src

   #+RESULTS:
   : Error in paste("Hello", y) : argument "y" is missing, with no default

4. What is an anonymous function?
   #+begin_src R
     sapply(X = 1:10,
            FUN = function(x) x^2) # function without a name
   #+end_src

   #+RESULTS:
   :  [1]   1   4   9  16  25  36  49  64  81 100

5. What does =vapply= do?
   #+begin_src R
     vapply(X = list(1,2,"3"),
            FUN = is.numeric,   # tests if X is numeric or not
            FUN.VALUE = logical(1) # expected output type
            )
   #+end_src

   #+RESULTS:
   : [1]  TRUE  TRUE FALSE

6. How can you check which arguments are mandatory, e.g. for =barplot=?
   #+begin_src R
     args(barplot)  # or call up the complete help with ?
   #+end_src

   #+RESULTS:
   : function (height, ...)
   : NULL

7. What do the functions =all= and =any= do?
   #+begin_src R
     foo <- c(1,0,1,1,1)
     all(foo == 1)   # are all elements of foo equal 1?
     any(foo == 0)   # are any elements of foo equal 0?
   #+end_src

   #+RESULTS:
   : [1] FALSE
   : [1] TRUE

8. What happens when you pass a vector to the condition of an =if=
   statement?
   #+begin_src R
     bar <- 5:10
     if(bar<6) print("OK")
   #+end_src

   #+RESULTS:
   : [1] "OK"
   : Warning message:
   : In if (bar < 6) print("OK") :
   :   the condition has length > 1 and only the first element will be used

9. Can you use =ifelse= to replace =NA= values in a vector with =0= values?
   #+begin_src R
     x <- c(1,2,NA,4)

     ifelse(test = is.na(x),   # tests if x is missing (NA)
            yes  = 0,
            no   = x)
   #+end_src

   #+RESULTS:
   : [1] 1 2 0 4

10. What are =&&= and =||= used for?
    #+begin_src R
      if (F || T) print("TRUE") # will print because F OR T == TRUE
      if (T && T) print("TRUE again") # will print because T AND T == TRUE
    #+end_src

    #+RESULTS:
    : [1] "TRUE"
    : [1] "TRUE again"


** if-else exercises

[[http://tinyurl.com/6-ifelse-practice-org][tinyurl.com/6-ifelse-practice-org]]

* Week 11: =switch= and =while= loops
#+attr_html: :width 400px:
[[../img/week_11.png]]

/AI image prompt: programmers celebrating Easter./

- Easter egg: deadlines stretched to their limits!

** Review and preview: nested (or stacked) =if= and =else= statement
*** Nested
Write a =function= called ~nested_if~ that takes 2 arguments and checks if
one is smaller than the other and prints the findings. Call the
function with the arguments 1,2 and 2,1.

Solution:
#+begin_src R
  nested_if <- function(a,b) {
    if (a < b) {
      print("first number is is smaller than second number")
    } else {
      print("first number is greater or equal than second number")
    }
  }

  nested_if(1,2)
  nested_if(2,1)
#+end_src

#+RESULTS:
: [1] "first number is is smaller than second number"
: [1] "first number is greater or equal than second number"

Another solution with =ifelse=
#+begin_src R

#+end_src

*** Stacked
What if you wanted to check if the two numbers were equal?
#+begin_quote
Answer: you could replace the =else= by an =else if= followed by an
=else=. This is what is called "stacked" rather than "nested".

Example:
#+begin_example
  if (condition) {
     do something
     } else if (condition) {
         do something
     } else {
         do something
     }
#+end_example

#+end_quote

Implement this and add a call to the modified ~nested_if~ with 2,2.

Solution:
#+begin_src R
  nested_if <- function(a,b)
  {
    if (a < b) {
      print("first number is is smaller than second number")
    } else if (a==b) {
      print("first number is equal to second number")
    } else {
      print("first number is greater or equal than second number")
    }
  }

  nested_if(1,2)
  nested_if(2,1)
  nested_if(2,2)
#+end_src

#+RESULTS:
: [1] "first number is is smaller than second number"
: [1] "first number is greater or equal than second number"
: [1] "first number is equal to second number"

*** Switched

Can you rewrite the last result as a =switch= statement?
#+begin_quote
Answer: you could couple it with =ifelse= to define the three outcomes
"less", "equal", and "greater".
#+end_quote

Solution:
#+begin_src R
  nested_switch <- function(a, b) {
    ## Define the comparison result as a character string
    comparison_result <- ifelse(a < b, "less", ifelse(a == b, "equal", "greater"))

    ## Use switch to select the action based on comparison_result
    message <- switch(comparison_result,
                      "less" = "first number is smaller than second number\n",
                      "equal" = "first number is equal to second number\n",
                      "greater" = "first number is greater than second number\n",
                      "Unexpected condition") # Default case, though it should not be reached

    cat(message)

  }
  nested_switch(1,2)
  nested_switch(2,1)
  nested_switch(2,2)
  nested_switch(Inf,Inf)
#+end_src

#+RESULTS:
: first number is smaller than second number
: first number is greater than second number
: first number is equal to second number
: first number is equal to second number

** New bonus assignment "Nesting complex if statements" (Canvas)
** New bonus assignment "Complex while loop problem" (Canvas)
** Review =switch=

1) What does =switch= replace to make code cleaner looking?
   #+begin_quote
   A set of stacked =if= ... =else= statements.
   #+end_quote
2) Which =switch= statements are there in R?
   #+begin_src R
     print(switch (EXPR=2,"foo","bar",NA))     # switch integer
     print(switch(EXPR="B","R"=1,"G"=2,"B"=3))  # switch character
   #+end_src

   #+RESULTS:
   : [1] "bar"
   : [1] 3

3) When is the =default= case used in a =switch= statement?
   #+begin_quote
   There is no 'default'. When the expression does not evaluate to any
   of the cases then the response is =NULL=.
   #+end_quote
   #+begin_src R
     ## There is no 'default' case unlike in C
     print(switch (4,"foo","bar",NA))     # switch integer
     print(switch("M","R"=1,"G"=2,"B"=3))  # switch character
   #+end_src

   #+RESULTS:
   : NULL
   : NULL

** Last two new DataCamp lessons: data processing on the command line

- downloading data on the commandline with =curl= and =wget=
- using =csvkit= (Python library) to manipulate data on the command line

** Review =while=

1) Problem:
   - Calculate the average flow of the =Nile= River until you encounter
     a year where the flow is less than 800 (million cubic meters).
   - The average flow is the total flow divided over the year count.
   - Start from the year 1871.
   - Print out the number of years it took to encounter such a year
     and the average flow up to that year.
   - Remember =Nile=:
     #+begin_src R
       Nile
     #+end_src

     #+RESULTS:
     : Time Series:
     : Start = 1871
     : End = 1970
     : Frequency = 1
     :   [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020  960 1180  799  958 1140 1100 1210
     :  [23] 1150 1250 1260 1220 1030 1100  774  840  874  694  940  833  701  916  692 1020 1050  969  831  726  456  824
     :  [45]  702 1120 1100  832  764  821  768  845  864  862  698  845  744  796 1040  759  781  865  845  944  984  897
     :  [67]  822 1010  771  676  649  846  812  742  801 1040  860  874  848  890  744  749  838 1050  918  986  797  923
     :  [89]  975  815 1020  906  901 1170  912  746  919  718  714  740

2) Solution in R:
   #+begin_src R
     ## load the dataset (not really needed because `Nile` is built-in
     data("Nile")

     ## Initialize variables
     threshold <- 900
     total_flow <- 0
     year_count <- 0
     i <- 1

     ## Loop through dataset until a flow less than 800 is found
     while (Nile[i] >= threshold) {
       total_flow <- total_flow + Nile[i]
       year_count <- year_count + 1
       i <- i + 1
     }

     ## calculate average flow up to the found year
     average_flow <- total_flow / year_count
     print(total_flow/6)
     ## print results
     cat("Years until encountering a flow less than", threshold, ":", year_count, "\n")
     cat("Average flow up to that year:", average_flow, "\n")
   #+end_src

   #+RESULTS:
   : [1] 1128.833
   : Years until encountering a flow less than 900 : 6
   : Average flow up to that year: 1128.833

** Loops in R - minilecture & practice

- [X] =while= loops
- [ ] =for= loops
- [ ] =apply= instead of loops

* Week 12: =for= loops, =break=, =next=, and =repeat=
#+attr_html: :width 300px:
[[../img/week_12.png]]

- Test 4: very nice results!
  #+attr_html: :width 400px:
  [[../img/test_4.png]]

* Week 13: Passing through: Python I
#+attr_html: :width 400px:
[[../img/week_13.png]]

** Practical Use case for =repeat=: continuous user input

- =repeat= can be used to continuously ask for user input until an
  acceptable response is received, making it useful for interactive
  scripts.

- Example: the script expects =numeric= input and exits with ~quit~.
  #+BEGIN_SRC R :tangle repeat.R :results none
    repeat {
      input <- readline(prompt = "Enter a number (or 'quit' to exit): ")
      if (tolower(input) == "quit") {
        cat("Exiting loop.\n")
        break
      }
      if (is.na(as.numeric(input))) {
        cat("Not a number. Please try again.\n")
      } else {
        cat("You entered:", as.numeric(input), "\n")
      }
    }
  #+END_SRC

- This code block must be tangled. Execute the script ~repeat.R~ with
  ~source("./repeat.R")~ on the R console:
  #+attr_html: :width 350px:
  [[../img/repeat.png]]

** Test 5 (R loops) is available until next +Sunday+ Monday
** Data science from scratch with Python I-III

*** Setup

- Create a new Orgmode file and put Python header-args into it:
  #+begin_example org
  #+PROPERTY: header-args:python :session *Python* :results output
  #+startup: overview hideblocks indent
  #+end_example

- Create a new Orgmode file

- At the top, put this code:
  #+begin_example
  #+property: header-args:python :session *Python* :results output
  #+startup: overview indent hideblocks
   #+end_example

*** Python coding review

1) Put this in a =list= named ~names~:
   - a dictionary with the keys "fname" and "lname" and the
     corresponding values, your first and last name
   - a tuple with your first and last name as values
   - =print= the =list=

   #+begin_src python :session *Python* :python python3 :results output :exports both :noweb yes
     names = [
         {"fname":"Marcus", "lname":"Birkenkrahe"},
         ("Marcus","Birkenkrahe")
     ]
     print(names)
   #+end_src

#+RESULTS:
: [{'fname': 'Marcus', 'lname': 'Birkenkrahe'}, ('Marcus', 'Birkenkrahe')]

2) =print= the =list= as a comprehension (with integrated =for= loop).

   #+begin_src python
     [print(_) for _ in names]
   #+end_src

#+RESULTS:
: {'fname': 'Marcus', 'lname': 'Birkenkrahe'}
: ('Marcus', 'Birkenkrahe')

3) =print= only the dictionary of the =list=

   #+begin_src python
     print(names[0])
   #+end_src

   #+RESULTS:
   : {'fname': 'Marcus', 'lname': 'Birkenkrahe'}

4) =print= only the =tuple= of the =list=

   #+begin_src python
     print(names[1])
   #+end_src

   #+RESULTS:
   : ('Marcus', 'Birkenkrahe')

5) =print= only the last name of the dictionary and the first name of
   the tuple.

   #+begin_src python
     print(names[0]['lname'])
     print(names[1][0])

     print(names[0]['lname'], names[1][0]     )
     print(names[0]['lname'] + " " + names[1][0]     )
   #+end_src

   #+RESULTS:
   : Birkenkrahe
   : Marcus
   : Birkenkrahe Marcus
   : Birkenkrahe Marcus

6) Use =append= to add the tuple ~('Albert','Einstein')~ to the =list=
   ~names~, then =print= the list as a comprehension again.

   #+begin_src python
     names.append("another list item")
     [print(_) for _ in names]
   #+end_src

   #+RESULTS:
   : {'fname': 'Marcus', 'lname': 'Birkenkrahe'}
   : ('Marcus', 'Birkenkrahe')
   : ('Albert', 'Einstein')
   : ('Albert', 'Einstein')
   : another list item

   #+begin_src python
     list.append(names,"will this work?")
     [print(_) for _ in names]
   #+end_src

   #+RESULTS:
   : {'fname': 'Marcus', 'lname': 'Birkenkrahe'}
   : ('Marcus', 'Birkenkrahe')
   : ('Albert', 'Einstein')
   : ('Albert', 'Einstein')
   : another list item
   : will this work?
   : will this work?
   : will this work?
   : will this work?

Solutions:
#+begin_src python :python python3 :session *Python* :results output :exports both :comments both :tangle yes :noweb yes
  # list definition
  names = [
      {"fname":"Marcus","lname":"Birkenkrahe"},
      ("Marcus","Birkenkrahe")
  ]

  # print the list
  print(names)

  # print the list as a comprehension
  [print(_) for _ in names]

  # print only the dictionary
  print(names[0])

  # print only the tuple
  print(names[1])

  # last name of the dictioxnary list item (
  print(names[0]['lname'])

  # first name of the tuple list item
  print(names[1][0])

  # append pair and print again
  names.append(('Albert','Einstein'))
  [print(_) for _ in names]
#+end_src


To continue the coding from where you left off: ~M-x org-babel-execute-buffer~

* Week 14: Passing through Python II
#+attr_html: :width 400px:
[[../img/week_14.png]]

** How are your final projects going? A snapshot.

- Timothy (7): Webscraping in Python
- Fowler (5): PyGame with examples
- Lucia (6): Visualizing grades with Matplotlib
- Thomas (4): Webscraping baseball packages in Python and R

** Python from Scratch - recap and next step

1) We received social network data in the form of a list of user
   dictionaries + friendship pairs (tuples).

2) We created a new dictionary for the friendship relationships: each
   user key has friends as values.
   #+begin_example
   0 [1, 2]
   1 [0, 2, 3]
   2 [0, 1, 3]
   3 [1, 2, 4]
   4 [3, 5]
   5 [4, 6, 7]
   6 [5, 8]
   7 [5, 8]
   8 [6, 7, 9]
   9 [8]
   #+end_example

3) Next, we're going to use the new dictionary for some queries, like:
   - What is the average number of connections of a user?
   - Who is most (and least) connected?

Get the file with the latest progress from:
tinyurl.com/scratch-that-python-itch
   
** Magic of Git!
#+attr_html: :width 400px:
[[../img/magic.png]]

(Thanks @ThomasLingren for trying some of this)

For this to work with a =git= command on your PC, Git must be installed
(requires admin rights) - so I'll be doing that before class.

Before attempting this, please complete the [[https://docs.github.com/en/get-started/start-your-journey/hello-world][GitHub "hello world"]]
tutorial if you haven't done it yet.

1. [ ] Register with GitHub (5 min)
2. [ ] Complete [[https://docs.github.com/en/get-started/start-your-journey/hello-world][GitHub Hello World Tutorial]] (30 min)
3. [ ] Create a repo ('main'/'origin') (5 min)
4. [ ] Clone repo to local computer ('remote') (5 min)
5. [ ] Add, commit and push remote (local) changes to main (origin) (5 min)

There are three scripts that I use and that I will share with you:
1) stat (to check for changes)
2) upd (to update changes between remote and origin repo)
3) fetch (to fetch and pull changes from the origin to the remote)

** Posted final presentation brief - schedule and questions
#+attr_html: :width 400px:
[[../img/research.png]]

Monday, May 6:
1) Lucia
2) Fowler

Wednesday, May 8:
1) Thomas
2) Timothy

Please have some if not all materials in place by the weekend so that
I take a look at them and prepare for the impact of your research.

* Week 15: Passing through Python III & data processing in shell
#+attr_html: :width 400px:
[[../img/week_15.png]]

** DONE Take 5 minutes to fill in the course evaluation!
#+attr_html: :width 400px:
[[../img/evaluation.png]]

- Register your email to get bonus points!
- It's still anonymous but I will be told that you filled it in!
- Don't hold back - let me have it - I can (probably) take it!

** DONE Final exam [Sunday 12-May 6-8 pm - online] - No more tests

- Test 1-6 covered 135 multiple choice questions, which is enough for
  a challenging final exam
- All questions will be sourced from test 1-6 - 40 questions in 2
  hours).
- The final exam is optional
- You can improve your grade with it (but you cannot make it worse)
- Please let me know in advance if you intend to take it (by May 8)
- The exam will be online & open book as the tests
- All tests are repeateable before but will be closed before the exam.

** DONE Complete the extended Python example (salaries and experience)
#+attr_html: :width 400px:
#+caption: Prompt: "create action figure diorama "The End of Python" - steampunk style"
[[../img/end_of_python.png]]

Practice file: [[https://tinyurl.com/scratch-that-python-itch][tinyurl.com/scratch-that-python-itch]]

1. Scatterplot
2. Histogram and barplots
3. Boxplots
4. Back to =pandas=

** TODO Data science on the command line (DataCamp + cvskit)

- Downloading data using =curl= and =wget=
- Convert, preview, filter and manipulate files with =csvkit=
- Operating databases from the commandline with =sql2csv=

* Week 16: Project presentations / 4th sprint review
#+attr_html: :width 400px:
[[../img/week_16.png]]

* Post-mortem (May 23)

In the evaluations (thank you!) someone said "[The professor] hates
Windows". That's not true. I just hate having to use it (ever), and in
my mind, it's linked to Dante's Inferno - you can see it at the center
of [[https://en.wikipedia.org/wiki/Divine_Comedy_Illustrated_by_Botticelli#/media/File:Illustration_for_Dante's_Inferno_by_Sandro_Botticelli_1481.jpg][this image by Baldini after Botticelli]], ca. 1481 (public
domain). It's ugly, it's pathetic, it stinks - but I don't hate
it. Also: with the new"Total Recall" feature of the new Windows, I
think a few more people are going to wake up to the truth. Will they
change their ways? Probably not but hope dies last :-) But let's focus
on the positive: summer! Hence here is another image - a Norwegian
Fjord painting to cool down (by Adelsteen Normann, 1870).
#+attr_html: :width 400px:
[[../img/fjord.png]]
