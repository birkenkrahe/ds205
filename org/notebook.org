#+TITLE: Agenda - Introduction to advanced data science
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Lyon College, Spring 2024
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+property: header-args:python :results output :noweb yes :session *Python* :exports both
#+property: header-args:R :results output :noweb yes :session *R* :exports both
* DONE Week 1: R basics and calling functions
#+ATTR_HTML: :WIDTH 400px:
[[../img/cover.png]]

- [X] Course details: see [[https://lyon.instructure.com/courses/2111/assignments/syllabus][syllabus]] and [[https://lyon.instructure.com/courses/2111/discussion_topics/8683][Jan 13 announcement]].
- [X] Course materials: [[https://github.com/birkenkrahe/ds205][GitHub]]. See also [[https://lyon.instructure.com/courses/2111/pages/course-links][course links]] in Canvas.
- [ ] *Test:* Review R basics (cp. DataCamp introduction).
- [ ] *Test*: Review Python basics (cp. DataCamp Python for R Users).
- [X] *Practice*: Getting back to GNU Emacs & Org-mode (tutorial).

** Julius has spoken

| Feature            | R                                                                  | Python                                                                 |
|--------------------+--------------------------------------------------------------------+------------------------------------------------------------------------|
| Primary Focus      | Statistical analysis and data visualization.                       | General-purpose programming with strong support for data analysis.     |
| Language Type      | Domain-specific language for statistics.                           | General-purpose programming language.                                  |
| Learning Curve     | Steeper for those not familiar with statistical analysis.          | Generally considered easier for beginners.                             |
| Community          | Strong in academia, statistics, and bioinformatics.                | Broad and diverse, strong in web development, AI, and data science.    |
| Data Analysis      | Excellent for complex statistical analyses.                        | Very good for data analysis with libraries like pandas and numpy.      |
| Data Visualization | Superior capabilities with ggplot2 and other packages.             | Good with libraries like matplotlib and seaborn.                       |
| Libraries          | Comprehensive libraries for statistics and plotting (e.g., dplyr). | Extensive libraries for various applications beyond data analysis.     |
| IDE Support        | RStudio is a powerful and popular IDE for R.                       | Multiple IDEs available, including Jupyter Notebook and PyCharm.       |
| Extensibility      | Can call Python, C, C++, and Fortran code.                         | Can call C, C++, and R code, among others.                             |
| Performance        | Generally slower than Python, but can be improved with Rcpp.       | Faster, with the ability to use Cython for performance-critical code.  |
| Deployment         | More challenging to deploy in production environments.             | Easier to deploy, with various frameworks and tools for deployment.    |
| Machine Learning   | Growing number of packages (e.g., caret, xgboost).                 | Extensive machine learning libraries (e.g., scikit-learn, TensorFlow). |
| Documentation      | Good, especially for statistical methods.                          | Extensive and often includes examples.                                 |
| Community Support  | Active forums and mailing lists.                                   | Very active communities on Stack Overflow, GitHub, etc.                |

** Individual term projects

- Identify a Python or R package that you explore during the term.
- 1st sprint: Identify research questions for the package.
- 2nd sprint: Develop an exploration and testing methodology.
- 3rd sprint: Summarize results with an abstract.
- 4th sprint: Present with interactive exercises.
- Submit Emacs Org-mode file and any other materials.
- Turn the project in an item for your resume portfolio!

** Announcement: Journal club!

Data science enthusiasts: there will be a "journal club" on Wednesday
12-12:45 pm in Derby room 209. We'll put the papers in a GDrive.

For the first journal club on Januar 31, I'd like to submit my last
non-technical paper, "The role of AI coding assistants: revisiting the
need for literate programming in computer and data science education."
([[https://drive.google.com/file/d/1OonJ1pesK2iRP3JDf4MoBRgg4NKk91yU/view?usp=sharing][Link]]) This paper will be presented at INTED'24, the 18th annual
International Technology, Education and Development Conference in
Valencia (Spain), March 4-6.

You can get some background on this topic from the wall poster in
front of my office, about the paper that I wrote before this one.
#+ATTR_HTML: :WIDTH 400px:
[[../img/MDPI_2023_BIRKENKRAHE_poster.pptx.png]]

*Caveat:* in a journal club, you discuss other people's papers and not
your own - I will try to simulate that by discussing my paper as if
someone else had written it, and also using AI to deliver a critique.

** 10 top tips: How to study programming languages

...when using DataCamp and/or when reviewing a test:

1) Read the texts and the instructions carefully.
2) Take notes if you can.
3) Recreate all code in your IDE before submitting it.
4) This will take at least twice as long as you expect.
5) You will learn a lot of extras along the way.
6) Your programmer's muscle memory will be improved.
7) Look at the classroom material to identify overlaps.
8) Look stuff up in books or in online documentation.
9) Review DataCamp lessons daily using practice questions.
10) Review tests monthly by completing them again.


** Announcement: UAMS College of Public Health student session

Monday, 29 January 12-12:45 PM via Zoom: http://tinyurl.com/UAMSCPUH
Passcode: 941969
#+ATTR_HTML: :WIDTH 400px:
[[../img/UAMS_student_session.png]]


** IN PROGRESS Test review - base R & conversion to R

Python test results:
#+begin_src R :results output :session *R* :exports both :noweb yes
  paste("Python test average", mean(c(77.5,97.5,56.67,75)))
  paste("R test average", mean(c(75,80,55,70)))
#+end_src

#+RESULTS:
: [1] "Python test average 76.6675"
: [1] "R test average 70"

1. Open Emacs.
2. Using ~M-x eww~, download the practice file from GitHub:
   [[http://tinyurl.com/dsc205start][tinyurl.com/dsc205start]] - save it with ~C-x C-w~
3. Navigate to your home directory (~~/~).
4. Using ~M-x eww~, download ~.emacs~ from GitHub:
   https://tinyurl.com/EmacsLyon - save it with ~C-x C-w~
5. Open the file ~(C-x C-f)~ and run it ~(M-x eval-buffer)~
6. Open the practice file and code alongside me.
7. Put your name and "(pledged)" next to it at the top after ~#+author:~
8. Submit the completed practice file to [[https://lyon.instructure.com/courses/2111/assignments/23788][Canvas]].


* Week 2: Python basics and calling functions
#+ATTR_HTML: :WIDTH 400px: 
[[../img/datascientist.png]]

Starting this week, project a more powerful data scientist profile!
New Year's resolution: look as fit and fierce as the guy in the photo!

- [X] Review: DataCamp lesson "Conditionals and control flow" in R
- [ ] New content: Fun facts!
- [ ] Review: Entry test Python/R (practice sheet) & Emacs exercise

** DONE DataCamp review questions

(AI-generated from the lesson slides):

1. What are relational operators in R and give an example?
   #+begin_notes
   Relational operators are used to compare values in R. An example is
   the equality operator ~==~, which checks if two values are
   equal. For instance, ~TRUE == TRUE~ evaluates to ~TRUE~.
   #+end_notes

2. How does the inequality operator work in R? Provide an example.
   #+begin_notes
   The inequality operator ~!=~ in R checks if two values are not
   equal. For example, ~TRUE != FALSE~ evaluates to ~TRUE~, indicating
   that the two values are indeed different.
   #+end_notes

   #+begin_src R
     TRUE != FALSE
   #+end_src

3. Can relational operators be used with vectors in R? Give an
   example.
   #+begin_notes
   Yes, relational operators can be applied to vectors in R. For
   example, if ~linkedin~ is a vector ~(16, 9, 13, 5, 2, 17, 14)~, the
   expression ~linkedin > 10~ would return a vector of logical values
   indicating whether each element in ~linkedin~ is greater than 10.
   #+end_notes
   #+begin_src R :results output :session *R* :exports both :noweb yes
     linkedin <- c(16, 9, 13, 5, 2, 17, 14)
     linkedin > 10
   #+end_src

   #+RESULTS:
   : [1]  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE

4. What are the logical operators in R and how do they work?
   #+begin_notes
   The logical operators in R include AND (~&~), OR (~|~), and NOT
   (~!~). The AND operator returns ~TRUE~ if both operands are true, the
   OR operator returns ~TRUE~ if at least one operand is true, and the
   NOT operator negates the truth value of its operand. For example,
   ~TRUE & FALSE~ evaluates to ~FALSE~, ~TRUE | FALSE~ to ~TRUE~, and ~!TRUE~ to
   ~FALSE~.
   #+end_notes
   #+begin_src R :results output :session *R* :exports both :noweb yes
     c(TRUE,TRUE,TRUE)  & c(FALSE,TRUE,TRUE)
     c(TRUE,TRUE,TRUE) && c(FALSE,TRUE,TRUE)
   #+end_src

   #+RESULTS:
   : [1] FALSE  TRUE  TRUE
   : [1] FALSE
   : Warning messages:
   : 1: In c(TRUE, TRUE, TRUE) && c(FALSE, TRUE, TRUE) :
   :   'length(x) = 3 > 1' in coercion to 'logical(1)'
   : 2: In c(TRUE, TRUE, TRUE) && c(FALSE, TRUE, TRUE) :
   :   'length(x) = 3 > 1' in coercion to 'logical(1)'

5. How do you write a conditional statement in R?
   #+begin_notes
   A conditional statement in R can be written using ~if~, ~else if~, and
   ~else~ clauses. For example, ~if (x < 0) { print("x is a negative
   number") } else { print("x is either a positive number or zero") }~
   will print a message based on the value of ~x~.
   #+end_notes
   #+begin_src R :results output :session *R* :exports both :noweb yes
     x <- 0
     if (x < 0) {
       print("x is a negative number")
     } else {
       print("x is either a positive number or zero")
     }
   #+end_src

   #+RESULTS:
   : [1] "x is either a positive number or zero"

** DONE Given any thought to your projects?

You'll have to present your proposal in 3 weeks!

What are you leaning towards?
- Packages that help me work with hospital birth data
- Packages that help me analyse video game player data
- Packages that help analyse financial data especially stocks

What will you need to do?
- Identify an interesting package
- Find data to experiment with
- What makes it special or unique?
- How would you apply it? ("Use cases")
- Comparing with other (similar) packages
- Who uses this package?
- How easy is it to use it?
- Is it beginner-friendly is it?
- What should you never use it for? (Performance, maintenance, data)
- Does it lend itself to an interactive exercise?
- If it's an R/Python packages, is there an Python/R equivalent 


** Fun facts
#+ATTR_HTML: :WIDTH 400px: 
[[../img/funfact.png]]

R:
#+begin_notes
R was named partly after its (NZ) creators, Ross Ihaka and Robert
Gentleman, which also playfully hints at its predecessors, S and
S-PLUS languages. Another fun fact: I've lived in NZ.
#+end_notes

And also: how can you check/change your working directory in R?
#+begin_src R :results output :session *R* :exports both :noweb yes
  ## Change the working directory to 'path_to_new_directory'
  setwd('path_to_new_directory')

  ## To confirm the current working directory has been changed, you can use getwd()
  print(getwd())
#+end_src

Python:
#+begin_notes
Python was named after the British comedy sQeries "Monty Python's
Flying Circus," not the snake. Its creator, Guido van Rossum, was a
fan of the show and wanted a name that was short, unique, and slightly
mysterious.
#+end_notes

And also: how can you check/change your working directory in Python?
#+begin_src python :results output :session *Python* :exports both :noweb yes
  import os

  # Change the working directory to 'path_to_new_directory'
  os.chdir('path_to_new_directory')

  # To confirm the current working directory has been changed, you can use getcwd()
  print("Current Working Directory: ", os.getcwd())
#+end_src

* Week 3: R conditionals and loops
* Week 4: Python conditionals and loops
* Week 5: Writing functions in R / 1st sprint review
* Week 6: Writing functions in Python
* Week 7: R utilities and =apply= family of functions
* Week 8: Data manipulation with =pandas= in Python
* Week 9: Natural language processing in R / 2nd sprint review
* Week 10: Natural language processing in Python
* Week 11: R: Importing and exporting data
* Week 12: Python: Importing and exporting data
* Week 13: Data science on the command line / 3rd sprint review
* Week 14: Integration of SQL with R and Python
* Week 15: Integration of C++ with R
* Week 16: Project presentations / 4th sprint review
